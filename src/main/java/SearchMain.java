import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonReader;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class SearchMain {
    private static final String USERS = "users";
    private static final String TICKETS = "tickets";
    private static final String ORGS = "organizations";
    private static final String QUIT = "quit";
    private static final List<String> WELCOME_MENU;
    static {
        WELCOME_MENU = new ArrayList<>();
        WELCOME_MENU.add(USERS);
        WELCOME_MENU.add(TICKETS);
        WELCOME_MENU.add(ORGS);
        WELCOME_MENU.add(QUIT);
    }
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        while (true) {
            printWelcomeText();
            Scanner scanner = new Scanner(System.in);
            String optedCategory = scanner.nextLine().trim();
            // TODO: add condition checks on selected category
            if (QUIT.equalsIgnoreCase(optedCategory)) {
                System.exit(1);
            }
            // based on selected search category, show searchable fields
            System.out.println(
                    String.format("Below are the searchable fields for category %s, select your search term",
                            optedCategory));
            displayAvailableSearchableFields(optedCategory);
            String optedSearchTerm = scanner.nextLine().trim();
            System.out.println("Enter the search value");
            String optedSearchvalue = scanner.nextLine().trim();
            List<JsonObject> searchResult = performSearchOperation(optedCategory, optedSearchTerm, optedSearchvalue);
            printResults(searchResult);
        }
    }

    private static void printResults(List<JsonObject> results) {
        if (CollectionUtils.isEmpty(results)) {
            System.out.println("No results found");
        }
        for (JsonObject jsonObject : results) {
            printPretty(jsonObject);
        }
    }

    private static void printPretty(JsonObject jsonObject) {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        System.out.println(gson.toJson(jsonObject));
    }

    private static List<JsonObject> performSearchOperation(String optedCategory,
                                                           String optedSearchTerm,
                                                           String optedSearchvalue) {
        //TODO: Perform some validations on search
        List<JsonObject> searchresult = new ArrayList<>();
        Gson gson = new Gson();
        InputStream jsonStream = getJsonStreamFromFile(optedCategory);
        try(JsonReader streamReader = new JsonReader(new InputStreamReader(jsonStream, "UTF-8"))){
            streamReader.beginArray();
            while (streamReader.hasNext()) {
                JsonObject jsonObject = gson.fromJson(streamReader, JsonObject.class);
                String jsonAsString = getStringRepresentation(jsonObject, optedSearchTerm);
                if (jsonAsString.contains(optedSearchvalue)) {
                    searchresult.add(jsonObject);
                }
                if(StringUtils.isEmpty(optedSearchvalue) && StringUtils.isEmpty(jsonAsString)) {
                    searchresult.add(jsonObject);
                }
            }
            streamReader.endArray();
        } catch (IOException e) {
            //TODO
            e.printStackTrace();
        }
        return searchresult;
    }

    private static String getStringRepresentation(JsonObject jsonObject, String optedSearchTerm) {
        String stringRepresentation = StringUtils.EMPTY;
        JsonElement jsonElement = jsonObject.get(optedSearchTerm);
        if (jsonElement != null) {
            if (jsonElement.isJsonPrimitive()) {
                stringRepresentation = jsonElement.getAsString();
            }
        }
        return stringRepresentation;
    }

    private static InputStream getJsonStreamFromFile(String optedCategory) {
        Class clazz = SearchMain.class;
        InputStream targetStream = clazz.getResourceAsStream("/"+optedCategory+".json");

        // TODO
        if (targetStream == null) {

        }
        return targetStream;
    }

    /**
     * Display the list of all searchable fields based on category type
     * @param optedCategory
     */
    private static void displayAvailableSearchableFields(String optedCategory) {
        return;
    }

    private static void printWelcomeText() {
        System.out.println("Welcome to Search");
        System.out.println("Type 'quit' to exit anytime, press Enter to continue" );
        System.out.println("Below are the list of categories to search for");
        WELCOME_MENU.forEach(System.out::println);
    }
}
